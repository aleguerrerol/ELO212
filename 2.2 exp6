[Codigo Act 3.1 Exp 5 que est√° relacionado a la 2.2 Exp 6]

module TOP_2.2(
    input logic [7:0]SW,
    input logic BTNC,
    output logic CA,CB,CC,CD,CE,CF,CG,
    output logic [7:0]AN 
    );
    assign AN = 8'b11111110;     
    bcd_to_seven_seg bcd_to_seven_seg2(.BCD_in(SW), .sevenSeg({CA,CB,CC,CD,CE,CF,CG}));
endmodule


AQUI IRIA EL 8BITS_to_BDC


module bcd_to_seven_seg(
    input logic [3:0] BCD_in,
    output logic [6:0] sevenSeg, // estructura (a,b,c,d,e,f,g) con a el MSB
    output logic [7:0] AN
    );
    always_comb begin
        AN = 8'b11111110;
        case(BCD_in) //Notar que los leds del display son active low.
            4'd0:   sevenSeg =  7'b0000001; //si el input (BCD_IN) son 4 bits, que son 0 en decimal (0000 en binario), 7seg pasa a valer abcdef, lo que representa 0
            4'd1:   sevenSeg =  7'b1001111; //1
            4'd2:   sevenSeg =  7'b0010010; //2
            4'd3:   sevenSeg =  7'b0000110; //3
            4'd4:   sevenSeg =  7'b1001100; //4
            4'd5:   sevenSeg =  7'b0100100; //5
            4'd6:   sevenSeg =  7'b1100000; //6
            4'd7:   sevenSeg =  7'b0001111; //7
            4'd8:   sevenSeg =  7'b0000000; //8
            4'd9:   sevenSeg =  7'b0001100; //9
            4'd10:   sevenSeg = 7'b0001000; //A
            4'd11:   sevenSeg = 7'b1100000; //b
            4'd12:   sevenSeg = 7'b0110001; //C
            4'd13:   sevenSeg = 7'b1000010; //d
            4'd14:   sevenSeg = 7'b0110000; //E
            4'd15:   sevenSeg = 7'b0111000; //F
            default: sevenSeg = 7'b1111111;
        endcase
    end
endmodule


